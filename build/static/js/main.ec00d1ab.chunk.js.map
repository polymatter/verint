{"version":3,"sources":["components/DataTable.js","App.js","reportWebVitals.js","index.js"],"names":["DataTable","headings","items","filterText","caption","className","map","heading","string","charAt","toUpperCase","slice","Math","random","filter","item","name","match","RegExp","App","useState","isTableShown","setIsTableShown","countriesURL","countries","setCountries","useEffect","a","axios","response","data","fetchData","setFilterText","onClick","type","onChange","event","target","value","placeholder","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6OA6BeA,EA3BG,SAAC,GAA8C,IAA5CC,EAA2C,EAA3CA,SAAUC,EAAiC,EAAjCA,MAAOC,EAA0B,EAA1BA,WAAYC,EAAc,EAAdA,QAM9C,OACI,wBAAOC,UAAU,QAAjB,UACI,kCAAUD,IACV,gCACI,6BACKH,EAASK,KAAI,SAAAC,GACV,OAAO,8BAVPC,EAU2CD,EATpDC,EAAOC,OAAO,GAAGC,cAAgBF,EAAOG,MAAM,KASrBC,KAAKC,UAVtB,IAACL,SAcZ,gCACKN,EAAMY,QAAO,SAAAC,GAAI,OAAIA,EAAKC,KAAKC,MAAM,IAAIC,OAAOf,EAAY,SAAOG,KAAI,SAAAS,GACpE,OAAO,6BAAyBd,EAASK,KAAI,SAAAC,GACzC,OAAO,6BAAyBQ,EAAKR,IAArBK,KAAKC,cADTD,KAAKC,mB,iBCqB1BM,MApCf,WAAe,MAG2BC,oBAAS,GAHpC,mBAGNC,EAHM,KAGQC,EAHR,KAUPC,EAAe,4CAVR,EAWqBH,mBAAS,IAX9B,mBAWNI,EAXM,KAWKC,EAXL,KAYbC,qBAAU,WAAM,4CACd,4BAAAC,EAAA,sEACyBC,IAAML,GAD/B,OACQM,EADR,OAEEJ,EAAaI,EAASC,KAAKN,WAF7B,4CADc,uBAAC,WAAD,wBAKdO,KACC,IAlBU,MAoBuBX,mBAAS,IApBhC,mBAoBNjB,EApBM,KAoBM6B,EApBN,KAyBb,OACE,sBAAK3B,UAAU,MAAf,UACE,yBAAQA,UAAU,cAAc4B,QAvBN,WAC5BX,GAAiBD,IAsBf,UAAiEA,EAAe,OAAS,OAAzF,YACA,uBAAOa,KAAK,OAAOC,SAPF,SAAAC,GACnBJ,EAAcI,EAAMC,OAAOC,QAMkBC,YAAY,WACrDlB,GACA,cAAC,EAAD,CAAWpB,SAAU,CAAC,OAAQ,QAASG,QAAQ,uCAAuCF,MAAOsB,EAAWrB,WAAYA,QCvB7GqC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.ec00d1ab.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst DataTable = ({ headings, items, filterText, caption }) => {\r\n\r\n    const capitalise = (string) => {\r\n        return string.charAt(0).toUpperCase() + string.slice(1);\r\n    }\r\n\r\n    return (\r\n        <table className=\"table\">\r\n            <caption>{caption}</caption>\r\n            <thead>\r\n                <tr>\r\n                    {headings.map(heading => {\r\n                        return <th key={Math.random()}>{capitalise(heading)}</th>\r\n                    })}\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {items.filter(item => item.name.match(new RegExp(filterText, 'i'))).map(item => {\r\n                    return <tr key={Math.random()}>{headings.map(heading => {\r\n                        return <td key={Math.random()}>{item[heading]}</td>\r\n                    })}</tr>\r\n                })}\r\n            </tbody>\r\n        </table>\r\n    )\r\n}\r\n\r\nexport default DataTable\r\n","import './App.css';\nimport { useState, useEffect } from 'react'\nimport DataTable from './components/DataTable';\nimport axios from 'axios';\n\nfunction App() {\n\n  // using the State hook in order to keep a boolean of whether the table is to be shown or not\n  const [isTableShown, setIsTableShown] = useState(true);\n  const toggleTableVisibility = () => {\n    setIsTableShown(!isTableShown);\n  }\n\n  // use the Effect hook and the State hook together in order to get data for the table\n  // pass [] as the second parameter of useEffect to only update on initial render\n  const countriesURL = 'http://api.nobelprize.org/v1/country.json';\n  const [countries, setCountries] = useState([]);\n  useEffect(() => {\n    async function fetchData() {\n      const response = await axios(countriesURL);\n      setCountries(response.data.countries);\n    }\n    fetchData();\n  }, []);\n\n  const [filterText, setFilterText] = useState(\"\");\n  const filterChange = event => {\n    setFilterText(event.target.value);\n  } \n\n  return (\n    <div className=\"App\">\n      <button className=\"tableToggle\" onClick={toggleTableVisibility}>{isTableShown ? 'Hide' : 'Show'} Table</button>\n      <input type=\"text\" onChange={filterChange} placeholder=\"Filter\"/>\n      { isTableShown &&\n        <DataTable headings={['name', 'code']} caption='Countries that have won Nobel Prizes' items={countries} filterText={filterText}/>\n      }\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}